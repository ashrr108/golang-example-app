// Test generated by RoostGPT for test roost-test using AI Type Open AI and AI Model gpt-4

package jwt

import (
	"encoding/base64"
	"testing"
)

func TestGenerateJWT_8f6148fa9b(t *testing.T) {
	// Test case 1: Valid private key and fields
	{
		privateKey, _ := base64.StdEncoding.DecodeString("MIIBOwIBAAJBAL3s4jP38C3Z6UOixlg9hI...")
		fields := map[string]interface{}{
			"aud":     "testAud",
			"sub":     "testSub",
			"iss":     "testIss",
			"id":      "testId",
			"exp":     1234567890,
			"user_id": 123,
			"nbf":     1234567890,
			"iat":     1234567890,
		}
		_, err := GenerateJWT(privateKey, fields)
		if err != nil {
			t.Error("Expected no error, but got ", err)
		}
	}

	// Test case 2: Invalid private key
	{
		privateKey := []byte("invalidKey")
		fields := map[string]interface{}{
			"aud":     "testAud",
			"sub":     "testSub",
			"iss":     "testIss",
			"id":      "testId",
			"exp":     1234567890,
			"user_id": 123,
			"nbf":     1234567890,
			"iat":     1234567890,
		}
		_, err := GenerateJWT(privateKey, fields)
		if err == nil {
			t.Error("Expected error, but got nil")
		}
	}

	// Test case 3: Invalid field
	{
		privateKey, _ := base64.StdEncoding.DecodeString("MIIBOwIBAAJBAL3s4jP38C3Z6UOixlg9hI...")
		fields := map[string]interface{}{
			"invalidField": "invalidValue",
		}
		_, err := GenerateJWT(privateKey, fields)
		if err != nil {
			t.Error("Expected no error, but got ", err)
		}
	}

	// Test case 4: Empty fields
	{
		privateKey, _ := base64.StdEncoding.DecodeString("MIIBOwIBAAJBAL3s4jP38C3Z6UOixlg9hI...")
		fields := map[string]interface{}{}
		_, err := GenerateJWT(privateKey, fields)
		if err != nil {
			t.Error("Expected no error, but got ", err)
		}
	}
}
