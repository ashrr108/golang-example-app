// Test generated by RoostGPT for test roost-test using AI Type Open AI and AI Model gpt-4

package cmd

import (
	"bytes"
	"fmt"
	"os"
	"strings"
	"testing"

	"github.com/aristat/golang-example-app/daemon"
	"github.com/aristat/golang-example-app/health_check_service"
	"github.com/aristat/golang-example-app/jwt"
	"github.com/aristat/golang-example-app/migrate"
	"github.com/aristat/golang-example-app/product_service"
	"github.com/spf13/cobra"
)

var rootCmd = &cobra.Command{
	Use:   "root",
	Short: "Root command",
}

func Execute() {
	rootCmd.AddCommand(daemon.Cmd, product_service.Cmd, health_check_service.Cmd, migrate.Cmd, jwt.Cmd)
	if e := rootCmd.Execute(); e != nil {
		_, _ = fmt.Fprintf(os.Stderr, "%v\n", e.Error())
		os.Exit(1)
	}
}

func TestExecute_0263ba38e4(t *testing.T) {
	t.Run("success", func(t *testing.T) {
		oldOsStderr := os.Stderr
		r, w, _ := os.Pipe()
		os.Stderr = w

		defer func() {
			os.Stderr = oldOsStderr
		}()

		go Execute()

		w.Close()

		var buf bytes.Buffer
		_, _ = buf.ReadFrom(r)
		output := buf.String()

		if output != "" {
			t.Errorf("Expected no error, but got %v", output)
		}
	})

	t.Run("failure", func(t *testing.T) {
		oldOsExit := os.Exit
		defer func() { os.Exit = oldOsExit }()

		var exitCode int
		os.Exit = func(code int) {
			exitCode = code
		}

		oldOsStderr := os.Stderr
		r, w, _ := os.Pipe()
		os.Stderr = w

		defer func() {
			os.Stderr = oldOsStderr
		}()

		go Execute()

		w.Close()

		var buf bytes.Buffer
		_, _ = buf.ReadFrom(r)
		output := buf.String()

		if exitCode != 1 {
			t.Errorf("Expected exit code 1, but got %v", exitCode)
		}

		if !strings.Contains(output, "Error") {
			t.Errorf("Expected error message, but got %v", output)
		}
	})
}
